{
//creates new trees data_tree_new from old trees data_tree in order to only keep those events which pass the "preselection" and "positive" criteria
const int NumFiles = 4;
char* filenames[NumFiles]={"stau100/Data_tree.root","stau200/Data_tree.root","stau300/Data_tree.root","zmumu/Data_tree.root"};
char* newfilenames[NumFiles]={"stau100/Data_tree_new.root","stau200/Data_tree_new.root","stau300/Data_tree_new.root","zmumu/Data_tree_new.root"};

for (int a=0; a<NumFiles; a++){
  //get old files, create new files
  TFile f(filenames[a]);
  TFile fnew(newfilenames[a],"recreate");

  //get old tree, create new tree
  TTree* data_tree = (TTree*) f.Get("data_tree");
  TTree* data_tree_new = new TTree("data_tree_new","data_tree_new");

  // Declaration of leaf types
  Int_t           runNo;
  Int_t           evtNo;
  Double_t        Eg0;
  Double_t        Eg1;
  Double_t        Etag0;
  Double_t        Etag1;
  Double_t        Phig0;
  Double_t        Phig1;
  Double_t        pg0;
  Double_t        pg1;
  Double_t        ptg0;
  Double_t        ptg1;
  Double_t        pxg0;
  Double_t        pxg1;
  Double_t        pyg0;
  Double_t        pyg1;
  Double_t        pzg0;
  Double_t        pzg1;
  Double_t        beta0;
  Double_t        beta1;
  Double_t        E0;
  Double_t        E1;
  Double_t        Eta0;
  Double_t        Eta1;
  Double_t        Phi0;
  Double_t        Phi1;
  Double_t        p0;
  Double_t        p1;
  Double_t        pt0;
  Double_t        pt1;
  Double_t        px0;
  Double_t        px1;
  Double_t        py0;
  Double_t        py1;
  Double_t        pz0;
  Double_t        pz1;
  Int_t           nsmt0;
  Int_t           nsmt1;
  Double_t        dedx0;
  Double_t        dedx1;
  Double_t        speed0;
  Double_t        speed1;
  Double_t        Chi0;
  Double_t        Chi1;
  Double_t        signif0;
  Double_t        signif1;
  Double_t        signifprod;
  Double_t        invmass;
  Float_t         evtweight;
  Bool_t          pass_presel;
  Bool_t          pass_posi;

  //Declaration of new leaf types
  Int_t           runNo_new;
  Int_t           evtNo_new;
  Double_t        Eg0_new;
  Double_t        Eg1_new;
  Double_t        Etag0_new;
  Double_t        Etag1_new;
  Double_t        Phig0_new;
  Double_t        Phig1_new;
  Double_t        pg0_new;
  Double_t        pg1_new;
  Double_t        ptg0_new;
  Double_t        ptg1_new;
  Double_t        pxg0_new;
  Double_t        pxg1_new;
  Double_t        pyg0_new;
  Double_t        pyg1_new;
  Double_t        pzg0_new;
  Double_t        pzg1_new;
  Double_t        beta0_new;
  Double_t        beta1_new;
  Double_t        E0_new;
  Double_t        E1_new;
  Double_t        Eta0_new;
  Double_t        Eta1_new;
  Double_t        Phi0_new;
  Double_t        Phi1_new;
  Double_t        p0_new;
  Double_t        p1_new;
  Double_t        pt0_new;
  Double_t        pt1_new;
  Double_t        px0_new;
  Double_t        px1_new;
  Double_t        py0_new;
  Double_t        py1_new;
  Double_t        pz0_new;
  Double_t        pz1_new;
  Int_t           nsmt0_new;
  Int_t           nsmt1_new;
  Double_t        dedx0_new;
  Double_t        dedx1_new;
  Double_t        speed0_new;
  Double_t        speed1_new;
  Double_t        Chi0_new;
  Double_t        Chi1_new;
  Double_t        signif0_new;
  Double_t        signif1_new;
  Double_t        signifprod_new;
  Double_t        invmass_new;
  Float_t         evtweight_new;
  Bool_t          pass_presel_new;
  Bool_t          pass_posi_new;

  //set old branch address
  data_tree->SetBranchAddress("runNo",&runNo);
  data_tree->SetBranchAddress("evtNo",&evtNo);
  data_tree->SetBranchAddress("Eg0",&Eg0);
  data_tree->SetBranchAddress("Eg1",&Eg1);
  data_tree->SetBranchAddress("Etag0",&Etag0);
  data_tree->SetBranchAddress("Etag1",&Etag1);
  data_tree->SetBranchAddress("Phig0",&Phig0);
  data_tree->SetBranchAddress("Phig1",&Phig1);
  data_tree->SetBranchAddress("pg0",&pg0);
  data_tree->SetBranchAddress("pg1",&pg1);
  data_tree->SetBranchAddress("ptg0",&ptg0);
  data_tree->SetBranchAddress("ptg1",&ptg1);
  data_tree->SetBranchAddress("pxg0",&pxg0);
  data_tree->SetBranchAddress("pxg1",&pxg1);
  data_tree->SetBranchAddress("pyg0",&pyg0);
  data_tree->SetBranchAddress("pyg1",&pyg1);
  data_tree->SetBranchAddress("pzg0",&pzg0);
  data_tree->SetBranchAddress("pzg1",&pzg1);
  data_tree->SetBranchAddress("beta0",&beta0);
  data_tree->SetBranchAddress("beta1",&beta1);
  data_tree->SetBranchAddress("E0",&E0);
  data_tree->SetBranchAddress("E1",&E1);
  data_tree->SetBranchAddress("Eta0",&Eta0);
  data_tree->SetBranchAddress("Eta1",&Eta1);
  data_tree->SetBranchAddress("Phi0",&Phi0);
  data_tree->SetBranchAddress("Phi1",&Phi1);
  data_tree->SetBranchAddress("p0",&p0);
  data_tree->SetBranchAddress("p1",&p1);
  data_tree->SetBranchAddress("pt0",&pt0);
  data_tree->SetBranchAddress("pt1",&pt1);
  data_tree->SetBranchAddress("px0",&px0);
  data_tree->SetBranchAddress("px1",&px1);
  data_tree->SetBranchAddress("py0",&py0);
  data_tree->SetBranchAddress("py1",&py1);
  data_tree->SetBranchAddress("pz0",&pz0);
  data_tree->SetBranchAddress("pz1",&pz1);
  data_tree->SetBranchAddress("nsmt0",&nsmt0);
  data_tree->SetBranchAddress("nsmt1",&nsmt1);
  data_tree->SetBranchAddress("dedx0",&dedx0);
  data_tree->SetBranchAddress("dedx1",&dedx1);
  data_tree->SetBranchAddress("speed0",&speed0);
  data_tree->SetBranchAddress("speed1",&speed1);
  data_tree->SetBranchAddress("Chi0",&Chi0);
  data_tree->SetBranchAddress("Chi1",&Chi1);
  data_tree->SetBranchAddress("signif0",&signif0);
  data_tree->SetBranchAddress("signif1",&signif1);
  data_tree->SetBranchAddress("signifprod",&signifprod);
  data_tree->SetBranchAddress("invmass",&invmass);
  data_tree->SetBranchAddress("evtweight",&evtweight);
  data_tree->SetBranchAddress("pass_presel",&pass_presel);
  data_tree->SetBranchAddress("pass_posi",&pass_posi);

  //set new branches
  data_tree_new->Branch("runNo_new",&runNo_new,"runNo_new/I");
  data_tree_new->Branch("evtNo_new",&evtNo_new,"evtNo_new/I");
  data_tree_new->Branch("Eg0_new",&Eg0_new,"Eg0_new/D");
  data_tree_new->Branch("Eg1_new",&Eg1_new,"Eg1_new/D");
  data_tree_new->Branch("Etag0_new",&Etag0_new,"Etag0_new/D");
  data_tree_new->Branch("Etag1_new",&Etag1_new,"Etag1_new/D");
  data_tree_new->Branch("Phig0_new",&Phig0_new,"Phig0_new/D");
  data_tree_new->Branch("Phig1_new",&Phig1_new,"Phig1_new/D");
  data_tree_new->Branch("pg0_new",&pg0_new,"pg0_new/D");
  data_tree_new->Branch("pg1_new",&pg1_new,"pg1_new/D");
  data_tree_new->Branch("ptg0_new",&ptg0_new,"ptg0_new/D");
  data_tree_new->Branch("ptg1_new",&ptg1_new,"ptg1_new/D");
  data_tree_new->Branch("pxg0_new",&pxg0_new,"pxg0_new/D");
  data_tree_new->Branch("pxg1_new",&pxg1_new,"pxg1_new/D");
  data_tree_new->Branch("pyg0_new",&pyg0_new,"pyg0_new/D");
  data_tree_new->Branch("pyg1_new",&pyg1_new,"pyg1_new/D");
  data_tree_new->Branch("pzg0_new",&pzg0_new,"pzg0_new/D");
  data_tree_new->Branch("pzg1_new",&pzg1_new,"pzg1_new/D");
  data_tree_new->Branch("beta0_new",&beta0_new,"beta0_new/D");
  data_tree_new->Branch("beta1_new",&beta1_new,"beta1_new/D");
  data_tree_new->Branch("E0_new",&E0_new,"E0_new/D");
  data_tree_new->Branch("E1_new",&E1_new,"E1_new/D");
  data_tree_new->Branch("Eta0_new",&Eta0_new,"Eta0_new/D");
  data_tree_new->Branch("Eta1_new",&Eta1_new,"Eta1_new/D");
  data_tree_new->Branch("Phi0_new",&Phi0_new,"Phi0_new/D");
  data_tree_new->Branch("Phi1_new",&Phi1_new,"Phi1_new/D");
  data_tree_new->Branch("p0_new",&p0_new,"p0_new/D");
  data_tree_new->Branch("p1_new",&p1_new,"p1_new/D");
  data_tree_new->Branch("pt0_new",&pt0_new,"pt0_new/D");
  data_tree_new->Branch("pt1_new",&pt1_new,"pt1_new/D");
  data_tree_new->Branch("px0_new",&px0_new,"px0_new/D");
  data_tree_new->Branch("px1_new",&px1_new,"px1_new/D");
  data_tree_new->Branch("py0_new",&py0_new,"py0_new/D");
  data_tree_new->Branch("py1_new",&py1_new,"py1_new/D");
  data_tree_new->Branch("pz0_new",&pz0_new,"pz0_new/D");
  data_tree_new->Branch("pz1_new",&pz1_new,"pz1_new/D");
  data_tree_new->Branch("nsmt0_new",&nsmt0_new,"nsmt0_new/I");
  data_tree_new->Branch("nsmt1_new",&nsmt1_new,"nsmt1_new/I");
  data_tree_new->Branch("dedx0_new",&dedx0_new,"dedx0_new/D");
  data_tree_new->Branch("dedx1_new",&dedx1_new,"dedx1_new/D");
  data_tree_new->Branch("speed0_new",&speed0_new,"speed0_new/D");
  data_tree_new->Branch("speed1_new",&speed1_new,"speed1_new/D");
  data_tree_new->Branch("Chi0_new",&Chi0_new,"Chi0_new/D");
  data_tree_new->Branch("Chi1_new",&Chi1_new,"Chi1_new/D");
  data_tree_new->Branch("signif0_new",&signif0_new,"signif0_new/D");
  data_tree_new->Branch("signif1_new",&signif1_new,"signif1_new/D");
  data_tree_new->Branch("signifprod_new",&signifprod_new,"signifprod_new/D");
  data_tree_new->Branch("invmass_new",&invmass_new,"invmass_new/D");
  data_tree_new->Branch("evtweight_new",&evtweight_new,"evtweight_new/F");
  data_tree_new->Branch("pass_presel_new",&pass_presel_new,"pass_presel_new/O");
  data_tree_new->Branch("pass_posi_new",&pass_posi_new,"pass_posi_new/O");

  //get entries for data_tree (read in the old tree), set new variables, fill new tree
  Int_t nentries = data_tree->GetEntries();

  for (Int_t i = 0; i<nentries; i++) {
    data_tree->GetEntry(i);
    runNo_new = runNo;
    evtNo_new = evtNo;
    pass_presel_new = pass_presel;
    pass_posi_new = pass_posi;
    if ((pass_presel == 1) &&(pass_posi == 1)){
      Eg0_new = Eg0;
      Eg1_new = Eg1;
      Etag0_new = Etag0;
      Etag1_new = Etag1;
      Phig0_new = Phig0;
      Phig1_new = Phig1;
      pg0_new = pg0;
      pg1_new = pg1;
      ptg0_new = ptg0;
      ptg1_new = ptg1;
      pxg0_new = pxg0;
      pxg1_new = pxg1;
      pyg0_new = pyg0;
      pyg1_new = pyg1;
      pzg0_new = pzg0;
      pzg1_new = pzg1;
      beta0_new = beta0;
      beta1_new = beta1;
      E0_new = E0;
      E1_new = E1;
      Eta0_new = Eta0;
      Eta1_new = Eta1;
      Phi0_new = Phi0;
      Phi1_new = Phi1;
      p0_new = p0;
      p1_new = p1;
      pt0_new = pt0;
      pt1_new = pt1;
      px0_new = px0;
      px1_new = px1;
      py0_new = py0;
      py1_new = py1;
      pz0_new = pz0;
      pz1_new = pz1;
      nsmt0_new = nsmt0;
      nsmt1_new = nsmt1;
      dedx0_new = dedx0;
      dedx1_new = dedx1;
      speed0_new = speed0;
      speed1_new = speed1;
      Chi0_new = Chi0;
      Chi1_new = Chi1;
      signif0_new = signif0;
      signif1_new = signif1;
      signifprod_new = signifprod;
      invmass_new = invmass;
      evtweight_new = evtweight;
      data_tree_new->Fill();
    } 
  }

  //print new trees and write to new files
  data_tree_new->Print();
  fnew.Write();
  
}
}
